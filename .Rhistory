demo ()
Nile
plot (Nile)
x<-c(1:10)
y <- x + 11
y <- c(x, 11)
y <- c(x, 11)
xMean <- mean(x)
xLength <- length(x)
xDevSq <- xDev^2
xSumDevSq <- sum(xDevSq)
xVar <- xSumDevSq/xLength
xSD <- sqrt(xVar)
sd(x)
xVar_s <- xSumDevSq/(xLength - 1)
search()
install.packages("tidyverse")
library("tidyverse")
search()
help(tidyverse)
example(persp)
?mtcars
summary(mtcars)
summary(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
getwd()
?setwd()
?setwd()
4+4
b<-4
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
library(IRkernel)
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/expenditure.txt", header=T)
n <- length(y)
pdf("plot_example.pdf")
plot(expenditure$X1, expenditure$Y)
dev.off()
plot(expenditure$X1, expenditure$Y)
dev.off()
# Option 1:
# Dataframe subsetting: df[rows, columns]
df_s <- df[df$genre=="Comedy" |
df$genre=="Drama" |
df$genre=="Documentary", ]
# Set working directory
setwd("/Users/isabellameier/Desktop/StatsI_Fall2023")
# Load data
df_not_tidy <- read.csv("datasets/movies.csv")
# First step, look at data
View(df_not_tidy)
str(df_not_tidy)
head(df_not_tidy)
summary(df_not_tidy)
# Load tidy version of data
# The data is prepared using the data_wraning.R script.
df <- readRDS("datasets/movies.rds")
str(df)
# First step, look at data
View(df)
class(df$genre)
levels(df$genre)
# Contingency table
table(df$genre, # Genre
df$critics_rating) # Rating
# Option 1:
# Dataframe subsetting: df[rows, columns]
df_s <- df[df$genre=="Comedy" |
df$genre=="Drama" |
df$genre=="Documentary", ]
View(df_s)
# Step by step
df$genre # Select column
# For each row, value=="Comedy" or "Drama" or "Documentary"?
df$genre=="Comedy" | df$genre=="Drama" | df$genre=="Documentary"
# Select rows with value=="Comedy" or "Drama" or "Documentary"
df[df$genre=="Comedy" |
df$genre=="Drama" |
df$genre=="Documentary", ]
# Install and load tidyverse
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
df_s <- subset(df, df$genre %in% c("Comedy","Documentary","Drama"))
View(df_s)
# Step by step
df$genre # Select column
"Horror" %in% c("Comedy","Documentary","Drama") # Horror is in vector?
"Comedy" %in% c("Comedy", "Documentary","Drama") # Comedy is in vector?
df$genre  %in% c("Comedy","Documentary","Drama") # For each row, value==Comedy or Documentary or Drama?
# Contingency table
table(df_s$genre, # Genre
df_s$critics_rating) # Rating
# Problem: Although we filtered our data
# the underlying levels still exist. Getting rid of
# these, we use the droplevels-function.
class(df_s$genre)
levels(df_s$genre)
df_s$genre <- droplevels(df_s$genre)
# Contingency table
table(df_s$genre, # Genre
df_s$critics_rating) # Rating
# Add marginal distributions
addmargins(table(df_s$genre, # Genre
df_s$critics_rating)) # Rating
# Joint probability
prop.table(table(df_s$genre,
df_s$critics_rating))
63/444
# (A) Conditional probability
# What is the probability of "Rotten",
# conditional on Comedy?
?prop.table()
# Over rows --> Rating conditional on genre
prop.table(table(df_s$genre, # rows
df_s$critics_rating), # columns
margin = 1) # over rows
63/87
# Add marginal distributions
# Over rows --> Rating conditional on genre
addmargins(prop.table(table(df_s$genre,
df_s$critics_rating),
margin = 1)) # over rows
# Round
round(addmargins(prop.table(table(df_s$genre,
df_s$critics_rating),
margin = 1)), 2)
# Step by step
round(0.72413793, 2) # Round to two decimals
# Over columns --> Genre conditional on rating
addmargins(prop.table(table(df_s$genre, # rows
df_s$critics_rating), # columns
margin = 2)) # over columns
63/190
# Bar plot
barplot(prop.table(table(df_s$genre,
df_s$critics_rating), margin=1),
xlab="Ranking",
ylab="Proportions",
main="Critics Rating by Genre",
beside=TRUE,
legend.text = TRUE,
args.legend = list(x=12,
y=0.7,
cex = 0.8,
box.col = "white"))
png(filename = "tutorials/03/barplot.png",
width = 600,
height = 350)
barplot(prop.table(table(df_s$genre,
df_s$critics_rating),margin=1),
xlab="Ranking",
ylab="Proportions",
main="Critics Rating by Genre",
beside=TRUE,
legend.text = TRUE,
args.legend = list(x=12,
y=0.7,
cex = 0.8,
box.col = "white"))
dev.off()
# Run Chi square test
chisq.test(df_s$genre,
df_s$critics_rating)
# Check p-value
sprintf("%.20f",1.097e-12)
# A little side note, look at residuals
chi <- chisq.test(df_s$genre,
df_s$critics_rating)
# Returns the Pearson residuals, (observed - expected) / sqrt(expected)
?chisq.test
chi$residuals
# Load data
df <- read.csv("datasets/fictional_data.csv")
# Scatter plot
plot(df$income,df$edu)
plot(df$income,df$edu,
col=df$cap+1) # Color over third variable (+1, because first color in R is white)
# Improve visualization and save
png(file="tutorials/03/scatter_plot.png")
plot(df$income,
df$edu,
col=df$cap+1,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
# Add legend
legend(1000, 8, # x and y position of legend
legend=c("Non capital", "Capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
dev.off()
dev.off()
# Calculate correlation
cor(df$income,df$edu)
# Add to scatter plot
plot(df$income,df$edu)
text(1200, 7, sprintf("Correlation=%s", round(cor(df$income,df$edu),4)))
summary(lm(df$income~df$edu))
# Scatter plot
plot(df$income,df$edu)
plot(df$income,df$edu,
col=df$cap+1) # Color over third variable (+1, because first color in R is white)
# Improve visualization and save
png(file="tutorials/03/scatter_plot.png")
plot(df$income,
df$edu,
col=df$cap+1,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
# Add legend
legend(1000, 8, # x and y position of legend
legend=c("Non capital", "Capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
dev.off()
# Calculate correlation
cor(df$income,df$edu)
data <- matrix(c(13, 7, 6, 7, 7, 1), ncol=3)
rownames(data) <- c('Upper Class', 'Lower Class')
colnames(data) <- c('Not Stopped', 'Bribe Requested', 'Stopped/Given warning')
data <- as.table(data)
data
mutate(sum_of_rows = rowSums(.))
mutate(sum_of_rows = rowSums( . ))
mutate(sum_of_rows = rowSums(data))
sum_of_rows <- rowSums(data)
data <- matrix(c(14, 7, 6, 7, 7, 1), ncol=3)
rownames(data) <- c('Upper Class', 'Lower Class')
colnames(data) <- c('Not Stopped', 'Bribe Requested', 'Stopped/Given warning')
data <- as.table(data)
data
sum_of_rows <- rowSums(data)
mutate(sum_of_rows = rowSums(data))
sum_of_cols <- colSums(data)
table_sum <- addmargins(data, FUN = sum)
data
class(data)
str(data)
addmargins(data)
expDat <- data.frame()
for (i in 1:3) {
expDat[i, 1] <- (sum(data[i,]) * sum
(data[, 1])) / sum(data)
expDat[i, 2] <- (sum(data[i,]) * sum
(data[, 2])) / sum(data)
expDat[i, 3] <- (sum(data[i,]) * sum
(data[, 3])) / sum(data)
}
expDat[i,1] <- (sum(data[i,]) * sum
(data[,1])) / sum(data)
expDat
ext_freq <- matrix(
(sum_of_rows * sum_of_cols) / sum(data),
nrow = 2,
ncol = 3
)
ext_freq <- matrix(
(sum_of_rows * sum_of_cols) / sum(data),
nrow = 2,
ncol = 3
)
print(ext_freq)
#
ChiSqr <- sum((data - expDat)^2/expDat)
#
ChiSqr <- sum((data - expDat)^2/expDat)
ChiSqr
#
chisq.test(data)
#
xisq <- chisq.test(data)
xisq
#
# df <- (nrow - 1)(ncol - 1) how do i do this?
# df <- (2-1)(3-1)
# df <- (1)*(2)
# df <- 2
df <- (nrow-1) * (ncol-1)
#
# df <- (nrow - 1)(ncol - 1) how do i do this?
# df <- (2-1)(3-1)
# df <- (1)*(2)
# df <- 2
nrow <- 2
ncol <- 3
df <- (nrow-1) * (ncol-1)
df
# B - Calculate the p-value. What is the conclusion if alpha = 0.1?
p_value <- pchisq(3.79, df=2, lower.tail = FALSE)
p_value
# C - standardised residual
names(data) <- gsub(" ", "_", names(data))
head(data)
data
dimnames(data)
names(dimnames(data)
names(dimnames(data))
names(dimnames(data)) <- c("Class", "Stopped")
names(dimnames(data))
data
# Doing the linear regression model
class_bribe_model <- lm(Class ~ Stopped, data=data)
summary(class_bribe_model)
# Doing the linear regression model
class_bribe_model <- lm("Class" ~ "Stopped", data=data)
data <- classbribe
# Doing the linear regression model
class_bribe_model <- lm("Class" ~ "Stopped", data=classbribe)
residuals <- df$Class -df$Stopped
#
datfra <-read_csv(file.choose())
datfra <-read_csv(url(urlfile))
#
urlfile="https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv"
datfra <-read_csv(url(urlfile))
spec(datFra)
spec(datfra)
head(datfra)
print(datfra)
#
Y1 <- "reserved"
X1 <- "female"
model1 <- lm(Y1~X1)
model1 <- lm(female~reserved, data = datfra)
model1
summary(model1)
res <- resid(model1)
plot(x=reserved, y=female)
plot(x=datfra$reserved, y=datfra$female)
plot(x=datfra$reserved, y=datfra$female, xlim=c(0,400), ylim=c(0,400))
plot(x=datfra$reserved, y=datfra$female, xlim=c(0,100), ylim=c(0,100))
plot(x=datfra$reserved, y=datfra$female, xlim=c(0,20), ylim=c(0,20))
print(datfra)
print(n=400)
print(datfra, n=400)
plot(x=datfra$reserved, y=datfra$female, xlim=c(0,400), ylim=c(0,400))
plot(x=datfra$reserved, y=datfra$female, xlim=c(0,10), ylim=c(0,10))
plot(x=datfra$female, y=datfra$water)
plot(x=datfra$female, y=datfra$water, xlim=c(0,350), ylim=c(0,5))
plot(x=datfra$female, y=datfra$water, xlim=c(0,5), ylim=c(0,300))
plot(x=datfra$female, y=datfra$irrigation, xlim=c(0,5), ylim=c(0,300))
View(xisq)
#
Y1 <- "reserved"
X1 <- "water"
model1 <- lm(water~reserved, data = datfra)
model1
summary(model1)
res <- resid(model1)
plot(x=datfra$reserved, y=datfra$water, xlim=c(0,10), ylim=c(0,350))
plot(x=datfra$water, y=datfra$reserved, xlim=c(0,10), ylim=c(0,350))
plot(x=datfra$water, y=datfra$reserved, xlim=c(0,300), ylim=c(0,10))
plot(x=datfra$reserved, y=datfra$water, xlim=c(0,10), ylim=c(0,300))
#
cor.test(datfra$reserved, datfra$water)
plot(x=datfra$reserved, y=datfra$water, xlim=c(0,5), ylim=c(0,300))
plot(x=datfra$reserved, y=datfra$water, xlim=c(0,2), ylim=c(0,320))
plot(x=datfra$reserved, y=datfra$water, xlim=c(0,2), ylim=c(0,120))
plot(x=datfra$reserved, y=datfra$water, xlim=c(0,2), ylim=c(0,40))
plot(x=datfra$reserved, y=datfra$water, xlim=c(0,2), ylim=c(0,320))
cor.test(datfra$reserved, datfra$water)
summary(model1)
plot(x=datfra$reserved, y=datfra$water, xlim=c(0,2), ylim=c(0,320))
cor.test(datfra$reserved, datfra$water)
x <- c(5:32)
y <- seq(2, 40, by=0.9)
t.test(x,y)
